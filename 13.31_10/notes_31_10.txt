31st of October, 2023

ARRAYS IN JAVASCRIPT

    - Arrays in JavaScript are a fundamental data structure used to store and manage collections of data. They are a type of object that allows you to store multiple values in a single variable. Arrays can hold various data types, including numbers, strings, objects, and even other arrays. Here's an overview of how to work with arrays in JavaScript:

        1. Creating an Array: You can create an array using square brackets [] and add elements separated by commas:
            e.g.,
                const fruits = ["apple", "banana", "orange"];
                const numbers = [1, 2, 3, 4, 5];

        2. Accessing Elements: You can access individual elements of an array using square brackets and their index. Arrays in JavaScript are zero-based, so the first element has an index of 0:
            e.g.,
                console.log(fruits[0]); // Output: "apple"
                console.log(numbers[2]); // Output: 3

        3. Modifying Elements: You can change the value of an element by assigning a new value to that index:
            e.g.,
                fruits[1] = "grape";
                console.log(fruits); // Output: ["apple", "grape", "orange"]

        4. Array Methods: JavaScript provides many built-in methods for working with arrays. Some commonly used methods include:

            push(): Add an element to the end of the array.
            pop(): Remove the last element from the array.
            unshift(): Add an element to the beginning of the array.
            shift(): Remove the first element from the array.
            length: Get the number of elements in the array.

            e.g.,
                fruits.push("kiwi");
                console.log(fruits); // Output: ["apple", "grape", "orange", "kiwi"]

        5. Iterating Through an Array: You can use loops, such as for or forEach(), to iterate through the elements of an array:
            e.g., 
                for (let i = 0; i < fruits.length; i++) {
                    console.log(fruits[i]);
                }

                // Using forEach()
                fruits.forEach(function(fruit) {
                    console.log(fruit);
                });

        6. Multidimensional Arrays: JavaScript allows you to create arrays of arrays, creating multidimensional arrays. For example:
            e.g.,
                const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
                console.log(matrix[1][2]); // Output: 6

        7. Array Properties: Arrays have some properties that provide information about the array, such as length, which tells you how many elements are in the array.
            e.g.,
                const length = fruits.length;
                console.log(length); // Output: 4

    - How to know if an object is an array or not in JS?
        In JavaScript, you can determine if an object is an array or not using several different methods. Here are some common approaches:

        1. Array.isArray() Method: The most straightforward and recommended way to check if an object is an array is to use the Array.isArray() method. This method returns true if the object is an array and false if it's not. Here's an example:
            e.g.,
                const myArray = [1, 2, 3];
                const notAnArray = { a: 1, b: 2 };

                console.log(Array.isArray(myArray)); // Output: true
                console.log(Array.isArray(notAnArray)); // Output: false

        2. Instanceof Operator: You can also use the instanceof operator to check if an object is an instance of the Array constructor:
            e.g.,
                const myArray = [1, 2, 3];
                const notAnArray = { a: 1, b: 2 };

                console.log(myArray instanceof Array); // Output: true
                console.log(notAnArray instanceof Array); // Output: false

            While instanceof can work in many cases, it may not be reliable in certain situations, especially when dealing with arrays from different frames or if you are working with complex object inheritance.

        3. Object.prototype.toString() Method: You can use Object.prototype.toString.call(obj) to get a string representation of the object's type and then check if it matches "[object Array]".
            e.g., 
                const myArray = [1, 2, 3];
                const notAnArray = { a: 1, b: 2 };

                console.log(Object.prototype.toString.call(myArray) === "[object Array]"); // Output: true
                console.log(Object.prototype.toString.call(notAnArray) === "[object Array]"); // Output: false

STRINGS IN JAVASCRIPT
    In JavaScript, strings are a fundamental data type used to represent text. They are a sequence of characters enclosed in either single or double quotes. Here's an overview of how to work with strings in JavaScript:

    1. Creating Strings: You can create strings by enclosing characters in single (' '), double (" "), or backticks (`) quotes. Backticks are used for template literals, which allow for easier string interpolation and multiline strings.
        e.g.,
            const singleQuotes = 'This is a string with single quotes.';
            const doubleQuotes = "This is a string with double quotes.";
            const templateLiteral = `This is a string using template literals.`;

    2. String Concatenation: You can concatenate (combine) strings using the + operator.
        e.g.,
            const firstName = "John";
            const lastName = "Doe";
            const fullName = firstName + " " + lastName; // "John Doe"

    3. String Length: The length property of a string returns the number of characters in the string.
        e.g.,
            const message = "Hello, World!";
            console.log(message.length); // Output: 13
    
    4. Accessing Characters: You can access individual characters within a string using square brackets and the character's index (0-based).
        e.g.,
            const str = "JavaScript";
            console.log(str[0]); // Output: "J"
            console.log(str[4]); // Output: "S"

    5. String Methods: JavaScript provides a wide range of built-in methods to manipulate strings. Some commonly used methods include:

            charAt(index): Returns the character at the specified index.
            substring(start, end): Returns a portion of the string between the specified indices.
            slice(start, end): Similar to substring but supports negative indices.
            toUpperCase(): Converts the string to uppercase.
            toLowerCase(): Converts the string to lowercase.
            trim(): Removes leading and trailing whitespace.
            split(separator): Splits the string into an array of substrings based on the separator.
            indexOf(substring): Returns the first index of a substring in the string.
            replace(old, new): Replaces a substring with another substring.
        e.g.,
            const sentence = "Hello, how are you?";
            console.log(sentence.split(" ")); // ["Hello,", "how", "are", "you?"]

    6. String Template Literals: Template literals introduced with backticks (`) allow for string interpolation and multiline strings.
        e.g.,
            const name = "Alice";
            const greeting = `Hello, ${name}!`;

    7. Escape Characters: You can use escape characters (e.g., \n for newline, \" for a double quote) to include special characters within strings.
        e.g., 
            const escapedString = "This is a \"quoted\" text.";


DATE OBJECT IN JS
    In JavaScript, Date objects are used to work with dates and times. They allow you to perform various operations related to dates, such as creating, formatting, and manipulating dates and times. Date objects are part of the JavaScript standard library and are created using the Date constructor. Here's an overview of how to work with Date objects in JavaScript:

    1. Creating Date Objects: You can create a Date object using the new Date() constructor. You can create a Date object without any arguments, in which case it represents the current date and time, or with specific arguments to set a particular date and time.
        e.g.,
            const currentDate = new Date(); // Current date and time
            const specificDate = new Date("2023-10-31T12:00:00"); // Specific date and time

    2. Getting Date and Time Components: Date objects provide methods to retrieve various components of the date and time, such as year, month, day, hour, minute, second, and more.
        e.g.,
            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth(); // Month is 0-based (0 = January, 11 = December)
            const day = now.getDate();
            const hour = now.getHours();
            const minute = now.getMinutes();
            const second = now.getSeconds();

    3. Formatting Dates: You can format Date objects as strings using methods like toDateString(), toLocaleDateString(), toLocaleTimeString(), and toTimeString(). You can also use libraries like Intl.DateTimeFormat for more advanced formatting.
        e.g.,
            const date = new Date();
            console.log(date.toDateString()); // "Mon Oct 31 2023"
            console.log(date.toLocaleDateString()); // "10/31/2023"

    4. Setting Date Components: You can modify specific components of a Date object using setter methods such as setFullYear(), setMonth(), setDate(), and so on.
        e.g., 
            const date = new Date();
            date.setFullYear(2023);
            date.setMonth(11); // December (0-based)
            date.setDate(25); // Christmas

    5. Performing Date Calculations: Date objects allow you to perform various date calculations, such as adding or subtracting days, months, or milliseconds.
        e.g., 
            const date = new Date();
            date.setDate(date.getDate() + 7); // Add 7 days

    6. Comparing Dates: You can compare two Date objects using comparison operators like <, <=, >, >=, and equality (== or ===) to determine which date is earlier or later.
        e.g., 
            const date1 = new Date("2023-10-31");
            const date2 = new Date("2023-11-01");
            if (date1 < date2) {
                console.log("date1 is earlier than date2");
            }
    7. Working with Timestamps: Date objects can be converted to timestamps (milliseconds since January 1, 1970) and vice versa using the getTime() and setTime() methods.
        e.g.,
            const date = new Date();
            const timestamp = date.getTime();
            const newDate = new Date(timestamp);


LAB WORK 
1. Create a webpage to demonstrate some of the methods of JS Arrays (e.g., concat(), join(), indexOf(), sort(), pop(), push() etc.).
2. Create a webpage to demonstrate some of the methods of JS Strings (e.g., charAt(), indexOf(), concat(), match(), replace(), etc.).
3. Create a webpage to demonstrate some of the methods of the Date object of JS (e.g., getTime(), getMonth(), getDate(), etc.).